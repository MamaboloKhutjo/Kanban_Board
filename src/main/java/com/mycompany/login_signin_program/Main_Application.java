/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.login_signin_program;

import javax.swing.JOptionPane;

/**
 *
 * @author Khutjo Mamabolo ST10438214
 */
public class Main_Application extends javax.swing.JFrame {

    int numTasks = Integer.parseInt(JOptionPane.showInputDialog(null, "Please input number of tasks:", "Number Of Tasks", JOptionPane.INFORMATION_MESSAGE));

    Task_Class methods = new Task_Class();

    //using string and integer arrays to allow the values that the user has inputed to be stored for later use
    int[] taskDuration = new int[numTasks];
    private String[] taskID;
    private String[] taskName = new String[numTasks];
    private String[] taskDescription = new String[numTasks];
    private String[] developerDetails = new String[numTasks];
    private String[] taskStatus = {"TO DO", "DOING", "DONE"};
    int i;

    /**
     * Creates new form Main_Application
     */
    public Main_Application() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(0, 204, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("ADD TASKS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 204));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Task status done");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 0, 51));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setText("Longest duration");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 153));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton4.setText("Task Name");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Developer name");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 0, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setText("Delete task");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Algerian", 2, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("SEARCH OPTIONS:");

        jButton7.setBackground(new java.awt.Color(255, 102, 0));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setText("Report");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(450, 450, 450)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(209, 209, 209)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addGap(0, 177, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(432, 432, 432)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        taskID = new String[numTasks];

        for (i = 0; i < numTasks; i++) {  //for loop where 0 is initialzed by one which keeps track of current task number, and is also incremented. and if i is less than the number of taskes inputted itwill continue until it reaches the max of numTasks
            taskName[i] = JOptionPane.showInputDialog(null, "Please enter Task " + (i + 1) + " Name:", "Task Name", JOptionPane.INFORMATION_MESSAGE);

            while (true) {  //using a while loop to make sure that the descriptions characters arnt larger than 50 characters
                taskDescription[i] = JOptionPane.showInputDialog(null, "Please enter Task " + (i + 1) + " Description:", "Task Description", JOptionPane.INFORMATION_MESSAGE);

                if (methods.CheckTaskDescription(taskDescription)) {
                    JOptionPane.showMessageDialog(null, "Please enter a task description of less than 50 Characters", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    break;
                }
            }

            developerDetails[i] = JOptionPane.showInputDialog(null, "Please enter developer details(Firstname & Lastname) for Task" + (i + 1) + ":", "Developer Details", JOptionPane.INFORMATION_MESSAGE);
            taskDuration[i] = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter Duration(in Hours) for Task " + (i + 1) + ":", "Task Duration", JOptionPane.INFORMATION_MESSAGE));

            //developing the task ID 
            String[] devName = developerDetails[i].split(" "); //were splitting the string where there is a space character, splitting it into two strings
            taskID[i] = methods.CreateTaskID(taskName, devName, i);
            JOptionPane.showMessageDialog(null, taskID[i]);

            //allowing the user to choose the status of the task.
            int choice = JOptionPane.showOptionDialog(null, "Task number: " + (i + 1), "Select an Option", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new String[]{"TO DO", "DOING", "DONE"}, "TO DO");
            switch (choice) {
                case 0:
                    taskStatus[i] = "TO DO";
                    break;
                case 1:
                    taskStatus[i] = "DOING";
                    break;
                case 2:
                    taskStatus[i] = "DONE";
                    break;
                default:
                    taskStatus[i] = "TO DO"; // default status if none selected
                    break;
            }

            //displaying all the inputed values
            methods.printTaskDetails(choice, taskStatus, developerDetails, i, taskName, taskDescription, taskID[i], taskDuration);
        }

        //dispalying the total of all tasks added
        JOptionPane.showMessageDialog(null, "the total duration of all tasks is: " + methods.returnTotalHours(taskDuration) + " Hours", "Total duration of all tasks", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 
        // Prompt the user to select the task status they want to see
        String[] statusOptions = {"TO DO", "DOING", "DONE"};
        String selectedStatus = (String) JOptionPane.showInputDialog(null,"Select the task status you want to view:","Select Task Status",JOptionPane.QUESTION_MESSAGE,null,statusOptions,statusOptions[0]);

        StringBuilder tasks = new StringBuilder();

        // Loop to go through and look for the tasks with the selected status
        for (int i = 0; i < numTasks; i++) {
            if (selectedStatus.equals(taskStatus[i])) {
                // Appending the details of the task to the StringBuilder
                tasks.append("Developer: ").append(developerDetails[i]).append("\n")
                        .append("Task Name: ").append(taskName[i]).append("\n")
                        .append("Duration: ").append(taskDuration[i]).append(" Hours\n\n");
            }
        }

        // Displaying the tasks with the selected status
        if (tasks.length() > 0) {
            JOptionPane.showMessageDialog(null, tasks.toString(), "Tasks with Status " + selectedStatus, JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No tasks with status " + selectedStatus + " found.", "Tasks with Status " + selectedStatus, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Variables to find the task with the longest duration
        int maxDuration = 0;
        String longestTaskDeveloper = "";
        String longestTaskName = "";

        // Loop to go through and look for the tasks with the longest duration
        for (i = 0; i < numTasks; i++) {
            // Check if the current task's duration is the longest
            if (taskDuration[i] > maxDuration) {
                maxDuration = taskDuration[i];
                longestTaskDeveloper = developerDetails[i];
                longestTaskName = taskName[i];
            }
        }

        // Displaying the task with the longest duration
        if (maxDuration > 0) {
            JOptionPane.showMessageDialog(null, "The task with the longest duration:\nDeveloper: " + longestTaskDeveloper + "\nTask Name: " + longestTaskName + "\nDuration: " + maxDuration + " Hours", "Longest Task Duration", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No tasks found.", "Longest Task Duration", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        // Search for a task by its name
        String searchTaskName = JOptionPane.showInputDialog(null, "Enter the Task Name to search:", "Search Task", JOptionPane.INFORMATION_MESSAGE);
        boolean taskFound = false;
        for (i = 0; i < numTasks; i++) {
            if (taskName[i].equalsIgnoreCase(searchTaskName)) {
                String taskDetails = "Task Name: " + taskName[i] + "\n"
                        + "Developer: " + developerDetails[i] + "\n"
                        + "Status: " + taskStatus[i];
                JOptionPane.showMessageDialog(null, taskDetails, "Task Found", JOptionPane.INFORMATION_MESSAGE);
                taskFound = true;
                break;
            }
        }
        if (!taskFound) {
            JOptionPane.showMessageDialog(null, "Task with name \"" + searchTaskName + "\" not found.", "Task Not Found", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // Search for all tasks assigned to a specific developer
        String searchDeveloperName = JOptionPane.showInputDialog(null, "Enter the Developer Name to search:", "Search Developer Tasks", JOptionPane.INFORMATION_MESSAGE);
        StringBuilder developerTasks = new StringBuilder();
        for (i = 0; i < numTasks; i++) {
            if (developerDetails[i].equalsIgnoreCase(searchDeveloperName)) {
                developerTasks.append("Task Name: ").append(taskName[i]).append("\n")
                        .append("Status: ").append(taskStatus[i]).append("\n\n");
            }
        }

        if (developerTasks.length() > 0) {
            JOptionPane.showMessageDialog(null, developerTasks.toString(), "Tasks Assigned to " + searchDeveloperName, JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No tasks assigned to \"" + searchDeveloperName + "\" found.", "Tasks Not Found", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // deleting the task using task name
        String deleteTaskName = JOptionPane.showInputDialog(null, "Enter the Task Name to delete:", "Delete Task", JOptionPane.INFORMATION_MESSAGE);
        boolean taskDeleted = false;
        for (i = 0; i < numTasks; i++) {
            if (taskName[i].equalsIgnoreCase(deleteTaskName)) {

                // Shift the elements to the left to delete the task
                for (int j = i; j < numTasks - 1; j++) {
                    taskName[j] = taskName[j + 1];
                    taskDescription[j] = taskDescription[j + 1];
                    developerDetails[j] = developerDetails[j + 1];
                    taskDuration[j] = taskDuration[j + 1];
                    taskStatus[j] = taskStatus[j + 1];
                    taskID[j] = taskID[j + 1];
                }
                // Decrease the number of tasks
                numTasks--;
                taskDeleted = true;
                break;
            }
        }
        if (taskDeleted) {
            JOptionPane.showMessageDialog(null, "Task \"" + deleteTaskName + "\" has been deleted.", "Task Deleted", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Task with name \"" + deleteTaskName + "\" not found.", "Task Not Found", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        StringBuilder report = new StringBuilder();

        for (int i = 0; i < numTasks; i++) {
            report.append("Task ID: ").append(taskID[i]).append("\n")
                    .append("Task Name: ").append(taskName[i]).append("\n")
                    .append("Task Description: ").append(taskDescription[i]).append("\n")
                    .append("Developer: ").append(developerDetails[i]).append("\n")
                    .append("Duration: ").append(taskDuration[i]).append(" Hours\n")
                    .append("Status: ").append(taskStatus[i]).append("\n\n");
        }

        JOptionPane.showMessageDialog(null, report.toString(), "All Captured Tasks", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
